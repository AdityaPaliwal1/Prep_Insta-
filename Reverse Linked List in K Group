/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node* reverseGroup(Node* head, int k) {
    Node* prev = nullptr;
    Node* curr = head;
    Node* next = nullptr;
    int count = 0;

    // Reverse k nodes of the given linked list
    while (curr != nullptr && count < k) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
        count++;
    }

    // next is now pointing to (k+1)th node
    // head is now the last node in the reversed group
    head->next = next;

    // Return the new head of the reversed group
    return prev;
}

Node* kReverse(Node* head, int k) {
    if (head == nullptr || k <= 1) return head;

    Node* dummy = new Node(0);  // Create a dummy node
    dummy->next = head;
    Node* prevGroupEnd = dummy;
    Node* curr = head;

    while (curr != nullptr) {
        // Check if there are at least k nodes left in the list
        Node* groupStart = curr;
        int count = 0;
        while (curr != nullptr && count < k) {
            curr = curr->next;
            count++;
        }
        if (count < k) break;  // Not enough nodes to reverse, break out of loop

        // Reverse k nodes
        Node* newGroupHead = reverseGroup(groupStart, k);

        // Connect the previous group with the new group
        prevGroupEnd->next = newGroupHead;
        prevGroupEnd = groupStart;

        // Move to the next group of nodes
        curr = prevGroupEnd->next;
    }

    Node* newHead = dummy->next;
    delete dummy;  // Clean up dummy node
    return newHead;
}
